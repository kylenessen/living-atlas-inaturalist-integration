---
title: "iNaturalist vs. Traditional Data Sources: A Comparative Analysis of Sensitive Species Records in California"
author: "Kyle Nessen"
date: "`r Sys.Date()`"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: true
    fig-width: 10
    fig-height: 6
    embed-resources: true
  pdf:
    toc: true
    fig-width: 8
    fig-height: 5
execute:
  warning: false
  message: false
  cache: true
---



# CNDDB
## Load data

```{r load-cnddb}
library(sf)

# Load CNDDB shapefile
cnddb <- st_read("data/gis_com/cnddb.shp")
```

## Find unique species names and counts

```{r species-analysis}
library(dplyr)
library(lubridate)
library(stringr)

# Convert SITEDATE to proper date format and clean species names
cnddb_clean <- cnddb %>%
    mutate(
        # Handle various date formats in SITEDATE
        site_date = case_when(
            nchar(SITEDATE) == 8 & !grepl("X", SITEDATE) ~ ymd(SITEDATE),
            nchar(SITEDATE) == 8 & grepl("XXXX$", SITEDATE) ~ ymd(paste0(substr(SITEDATE, 1, 4), "0101")),
            TRUE ~ as.Date(NA)
        ),
        # Flag records from last 3 years
        recent_record = !is.na(site_date) & site_date >= (Sys.Date() - years(3)),
        # Clean species names for better GBIF matching
        SNAME_clean = SNAME %>%
            str_remove_all(" pop\\. \\d+") %>%
            str_replace_all(" ssp\\. ", " ") %>%
            str_replace_all(" var\\. ", " ") %>%
            str_trim() %>%
            str_squish()
    )

# Species summary with counts and recent records (grouped by cleaned names)
species_summary <- cnddb_clean %>%
    st_drop_geometry() %>%
    group_by(SNAME_clean) %>%
    summarise(
        total_records = n(),
        recent_records = sum(recent_record, na.rm = TRUE),
        earliest_date = min(site_date, na.rm = TRUE),
        latest_date = max(site_date, na.rm = TRUE),
        # Keep track of original names for reference
        original_names = paste(unique(SNAME), collapse = "; "),
        common_names = paste(unique(CNAME), collapse = "; "),
        .groups = "drop"
    ) %>%
    arrange(desc(total_records))

# Display summary statistics
cat("Total unique species:", nrow(species_summary), "\n")
cat("Species with records in last 3 years:", sum(species_summary$recent_records > 0), "\n")
cat("Total recent records:", sum(species_summary$recent_records), "\n")

# Show top species by record count
head(species_summary, 10)

# Save species list for GBIF queries
cnddb_species_list <- species_summary %>%
    select(SNAME_clean, original_names, common_names, total_records, recent_records) %>%
    arrange(SNAME_clean)

# Export to CSV for reference
write.csv(cnddb_species_list, "data/cnddb_species_list.csv", row.names = FALSE)

cat("Species list saved to data/cnddb_species_list.csv\n")
cat("Total species for GBIF queries:", nrow(cnddb_species_list), "\n")
```

# GBIF

## Download the data

See `gbif_download.qmd` for code on requesting the batch download.

## Load the GBIF occurrence data

```{r load-gbif}
library(data.table)

# Check if GBIF data exists
if (!file.exists("data/0050088-250525065834625.csv")) {
    stop("GBIF data not found. Run gbif_download.qmd first to download the data.")
}

# Load GBIF occurrences - using fread() as it handles GBIF tab-delimited CSV files better
gbif_data <- fread("data/0050088-250525065834625.csv")

```

## Remove birds
Looking at the records, the observations are overwhelmed by eBird sightings. Because protections around birds are a bit odd (only nesting), I am going to remove them to avoid blowing up the signal from eBird.



```{r institution-analysis}
library(ggplot2)

# Count records by institutionCode
inst_counts <- gbif_data[, .N, by = institutionCode][order(-N)]

# Show top 10 institutions
head(inst_counts, 10)

# Plot histogram (bar plot) of record counts by institutionCode (top 20 for readability)
top_n <- 20
inst_counts_top <- inst_counts[1:top_n]

ggplot(inst_counts_top, aes(x = reorder(institutionCode, -N), y = N)) +
    geom_bar(stat = "identity", fill = "steelblue") +
    labs(
        title = paste("Top", top_n, "Institutions by Record Count (GBIF)"),
        x = "Institution Code",
        y = "Number of Records"
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r filter-birds}
# Check bird records before filtering
cat("Total records before filtering:", nrow(gbif_data), "\n")
cat("Bird records (class = Aves):", nrow(gbif_data[class == "Aves"]), "\n")

# Filter out birds (class = "Aves")
gbif_data <- gbif_data[class != "Aves" | is.na(class)]

cat("Total records after removing birds:", nrow(gbif_data), "\n")
```
```{r institution-analysis}
library(ggplot2)

# Count records by institutionCode
inst_counts <- gbif_data[, .N, by = institutionCode][order(-N)]

# Show top 10 institutions
head(inst_counts, 10)

# Plot histogram (bar plot) of record counts by institutionCode (top 20 for readability)
top_n <- 20
inst_counts_top <- inst_counts[1:top_n]

ggplot(inst_counts_top, aes(x = reorder(institutionCode, -N), y = N)) +
    geom_bar(stat = "identity", fill = "steelblue") +
    labs(
        title = paste("Top", top_n, "Institutions by Record Count (GBIF)"),
        x = "Institution Code",
        y = "Number of Records"
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```