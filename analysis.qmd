---
title: "iNaturalist vs. Traditional Data Sources: Timeseries Analysis"
author: "Kyle Nessen"
date: "`r Sys.Date()`"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: true
    fig-width: 10
    fig-height: 6
    embed-resources: true
  pdf:
    toc: true
    fig-width: 8
    fig-height: 5
execute:
  warning: false
  message: false
  cache: true
---

# Load and Prepare Data

## Load CNDDB Data

```{r load-cnddb}
library(sf)

# Load CNDDB shapefile
cnddb <- st_read("data/gis_com/cnddb.shp")
```

## Clean Species Names

```{r species-analysis}
library(dplyr)
library(lubridate)
library(stringr)

# Convert SITEDATE to proper date format and clean species names
cnddb_clean <- cnddb %>%
    mutate(
        # Handle various date formats in SITEDATE
        site_date = case_when(
            nchar(SITEDATE) == 8 & !grepl("X", SITEDATE) ~ ymd(SITEDATE),
            nchar(SITEDATE) == 8 & grepl("XXXX$", SITEDATE) ~ ymd(paste0(substr(SITEDATE, 1, 4), "0101")),
            TRUE ~ as.Date(NA)
        ),
        # Flag records from last 3 years
        recent_record = !is.na(site_date) & site_date >= (Sys.Date() - years(3)),
        # Clean species names for better GBIF matching
        SNAME_clean = SNAME %>%
            str_remove_all(" pop\\. \\d+") %>%
            str_replace_all(" ssp\\. ", " ") %>%
            str_replace_all(" var\\. ", " ") %>%
            str_trim() %>%
            str_squish()
    )

# Species summary with counts and recent records (grouped by cleaned names)
species_summary <- cnddb_clean %>%
    st_drop_geometry() %>%
    group_by(SNAME_clean) %>%
    summarise(
        total_records = n(),
        recent_records = sum(recent_record, na.rm = TRUE),
        earliest_date = min(site_date, na.rm = TRUE),
        latest_date = max(site_date, na.rm = TRUE),
        # Keep track of original names for reference
        original_names = paste(unique(SNAME), collapse = "; "),
        common_names = paste(unique(CNAME), collapse = "; "),
        .groups = "drop"
    ) %>%
    arrange(desc(total_records))

# Save species list for GBIF queries
cnddb_species_list <- species_summary %>%
    select(SNAME_clean, original_names, common_names, total_records, recent_records) %>%
    arrange(SNAME_clean)

# Export to CSV for reference
write.csv(cnddb_species_list, "data/cnddb_species_list.csv", row.names = FALSE)
```

## Load GBIF Data

```{r load-gbif}
library(data.table)

# Check if GBIF data exists
if (!file.exists("data/0050088-250525065834625.csv")) {
    stop("GBIF data not found. Run gbif_download.qmd first to download the data.")
}

# Load GBIF occurrences - using fread() as it handles GBIF tab-delimited CSV files better
gbif_data <- fread("data/0050088-250525065834625.csv")
```

## Filter Out Birds

```{r filter-birds}
# Check bird records before filtering
cat("Total records before filtering:", nrow(gbif_data), "\n")
cat("Bird records (class = Aves):", nrow(gbif_data[class == "Aves"]), "\n")

# Filter out birds (class = "Aves")
gbif_data <- gbif_data[class != "Aves" | is.na(class)]

cat("Total records after removing birds:", nrow(gbif_data), "\n")
```

## Create Species Mappings

```{r gbif-species-summary}
# First, get the matched usageKeys to filter GBIF data to only CNDDB species
if (!exists("species_to_usagekey")) {
    # Load the GBIF good matches to get usageKey mappings
    if (!file.exists("data/gbif_good_matches.csv")) {
        stop("GBIF good matches file not found. This file should contain usageKey mappings.")
    }
    gbif_matches <- fread("data/gbif_good_matches.csv")
    species_to_usagekey <- gbif_matches[, .(species = verbatim_name, usageKey)]
}

# Get matched usageKeys for filtering
matched_usagekeys_for_summary <- unique(species_to_usagekey$usageKey[!is.na(species_to_usagekey$usageKey)])

# Create species summary for GBIF data (ONLY for species that match CNDDB)
gbif_species_summary <- gbif_data[
    !is.na(species) & !is.na(year) & taxonKey %in% matched_usagekeys_for_summary, # Filter to CNDDB-matched species only
    .(
        usageKey = first(na.omit(taxonKey)), # Keep usageKey as requested
        total_records = .N,
        recent_records = sum(year >= (year(Sys.Date()) - 3), na.rm = TRUE),
        recent_inaturalist_records = sum(year >= (year(Sys.Date()) - 3) &
            (institutionCode == "iNaturalist" |
                institutionCode == "iNat" |
                grepl("iNaturalist", institutionCode, ignore.case = TRUE)), na.rm = TRUE),
        recent_other_records = sum(year >= (year(Sys.Date()) - 3) &
            !(institutionCode == "iNaturalist" |
                institutionCode == "iNat" |
                grepl("iNaturalist", institutionCode, ignore.case = TRUE)) &
            !is.na(institutionCode), na.rm = TRUE),
        inaturalist_records = sum(institutionCode == "iNaturalist" |
            institutionCode == "iNat" |
            grepl("iNaturalist", institutionCode, ignore.case = TRUE), na.rm = TRUE),
        other_institution_records = sum(!(institutionCode == "iNaturalist" |
            institutionCode == "iNat" |
            grepl("iNaturalist", institutionCode, ignore.case = TRUE)) &
            !is.na(institutionCode), na.rm = TRUE),
        earliest_year = min(year, na.rm = TRUE),
        latest_year = max(year, na.rm = TRUE),
        top_institutions = paste(head(names(sort(table(institutionCode), decreasing = TRUE)), 3), collapse = "; ")
    ),
    by = species
][order(-total_records)]
```

## Combine Datasets

```{r combine-datasets}
# Load the GBIF good matches to get usageKey mappings
if (!file.exists("data/gbif_good_matches.csv")) {
    stop("GBIF good matches file not found. This file should contain usageKey mappings.")
}

gbif_matches <- fread("data/gbif_good_matches.csv")

# Create a mapping from species names to usageKey
species_to_usagekey <- gbif_matches[, .(species = verbatim_name, usageKey)]

# Combine CNDDB data with GBIF data using usageKey
# First, get CNDDB species with their usageKeys
cnddb_with_usagekey <- merge(
    cnddb_species_list,
    species_to_usagekey,
    by.x = "SNAME_clean",
    by.y = "species",
    all.x = TRUE
)

# Convert to data.table for easier manipulation
cnddb_with_usagekey <- as.data.table(cnddb_with_usagekey)

# For species that matched, get their GBIF data
matched_species <- cnddb_with_usagekey[!is.na(usageKey)]

# Create combined summary for matched species
if (nrow(matched_species) > 0) {
    # Get GBIF data for matched species ONLY (filter by usageKey)
    gbif_matched <- merge(
        gbif_species_summary,
        matched_species[, .(species = SNAME_clean, usageKey, cnddb_records = total_records, cnddb_recent = recent_records)],
        by.x = "usageKey",
        by.y = "usageKey",
        all.y = TRUE
    )

    # Replace NA values with 0 for species not found in GBIF
    gbif_matched[is.na(total_records), total_records := 0]
    gbif_matched[is.na(inaturalist_records), inaturalist_records := 0]
    gbif_matched[is.na(other_institution_records), other_institution_records := 0]
    gbif_matched[is.na(recent_inaturalist_records), recent_inaturalist_records := 0]
    gbif_matched[is.na(recent_other_records), recent_other_records := 0]

    # Create the combined summary
    combined_summary <- gbif_matched[, .(
        species_name = species.y,
        usageKey = usageKey,
        # CNDDB (sensitive species database)
        cnddb_records = cnddb_records,
        cnddb_recent_records = cnddb_recent,
        # iNaturalist
        inaturalist_records = inaturalist_records,
        inaturalist_recent_records = recent_inaturalist_records,
        # All others (GBIF other institutions + CNDDB)
        other_gbif_records = other_institution_records,
        other_gbif_recent_records = recent_other_records,
        # Combined "all others" category
        all_others_records = cnddb_records + other_institution_records,
        all_others_recent_records = cnddb_recent + recent_other_records,
        # Total records
        total_all_records = cnddb_records + inaturalist_records + other_institution_records
    )][order(-total_all_records)]
}
```

# Timeseries Analysis

## Create Yearly Summaries

```{r yearly-summaries}
if (exists("combined_summary") && nrow(combined_summary) > 0) {
    # Create yearly summaries for CNDDB data
    cnddb_yearly <- cnddb_clean %>%
        filter(!is.na(site_date)) %>%
        mutate(year = year(site_date)) %>%
        filter(year >= 1990 & year <= year(Sys.Date())) %>% # Reasonable time bounds
        group_by(SNAME_clean, year) %>%
        summarise(cnddb_records = n(), .groups = "drop")

    # Create yearly summaries for GBIF data (for matched species only)
    # Use the same matched_usagekeys as the box plots for consistency
    matched_usagekeys <- matched_usagekeys_for_summary

    # Use the correct institution column name
    institution_col <- if ("institutionCode" %in% names(gbif_data)) {
        "institutionCode"
    } else if ("institutionId" %in% names(gbif_data)) {
        "institutionId"
    } else if ("publishingOrgKey" %in% names(gbif_data)) {
        "publishingOrgKey"
    } else {
        "institutionCode" # Default fallback
    }

    gbif_yearly <- gbif_data[
        taxonKey %in% matched_usagekeys &
            !is.na(year) &
            year >= 1990 &
            year <= year(Sys.Date()),
        .(
            species_name = species,
            usageKey = taxonKey,
            year = year,
            institution_value = get(institution_col),
            is_inaturalist = grepl("iNaturalist|iNat", get(institution_col), ignore.case = TRUE)
        )
    ][, .(
        inaturalist_records = sum(is_inaturalist, na.rm = TRUE),
        other_gbif_records = sum(!is_inaturalist & !is.na(institution_value), na.rm = TRUE)
    ), by = .(species_name, usageKey, year)]
}
```

## Combine Yearly Data

```{r combine-yearly-data}
if (exists("cnddb_yearly") && exists("gbif_yearly")) {
    # Combine yearly data using usageKey mappings
    cnddb_yearly_with_key <- merge(
        cnddb_yearly,
        species_to_usagekey,
        by.x = "SNAME_clean",
        by.y = "species",
        all.x = TRUE
    ) %>%
        filter(!is.na(usageKey)) %>%
        select(usageKey, year, cnddb_records)

    # Create complete yearly dataset
    # Get all combinations of usageKey and year
    all_years <- seq(1990, year(Sys.Date()))
    all_usagekeys <- unique(c(cnddb_yearly_with_key$usageKey, gbif_yearly$usageKey))

    yearly_template <- expand.grid(
        usageKey = all_usagekeys,
        year = all_years,
        stringsAsFactors = FALSE
    )

    # Merge all data sources
    yearly_combined <- yearly_template %>%
        left_join(cnddb_yearly_with_key, by = c("usageKey", "year")) %>%
        left_join(gbif_yearly %>% select(usageKey, year, inaturalist_records, other_gbif_records),
            by = c("usageKey", "year")
        ) %>%
        mutate(
            cnddb_records = ifelse(is.na(cnddb_records), 0, cnddb_records),
            inaturalist_records = ifelse(is.na(inaturalist_records), 0, inaturalist_records),
            other_gbif_records = ifelse(is.na(other_gbif_records), 0, other_gbif_records),
            all_others_records = cnddb_records + other_gbif_records
        )
}
```

## Calculate Cumulative Totals

```{r calculate-cumulative}
if (exists("yearly_combined")) {
    # Aggregate by year across all species
    annual_totals <- yearly_combined %>%
        group_by(year) %>%
        summarise(
            inaturalist_annual = sum(inaturalist_records),
            all_others_annual = sum(all_others_records),
            .groups = "drop"
        ) %>%
        arrange(year) %>%
        mutate(
            inaturalist_cumulative = cumsum(inaturalist_annual),
            all_others_cumulative = cumsum(all_others_annual)
        )
}
```

# Timeseries Visualization

```{r timeseries-visualization}
if (exists("annual_totals")) {
    library(ggplot2)
    library(scales)
    library(tidyr)

    # Reshape data for plotting
    timeseries_data <- annual_totals %>%
        select(year, inaturalist_cumulative, all_others_cumulative) %>%
        pivot_longer(
            cols = c(inaturalist_cumulative, all_others_cumulative),
            names_to = "category",
            values_to = "cumulative_records"
        ) %>%
        mutate(
            category = case_when(
                category == "inaturalist_cumulative" ~ "iNaturalist",
                category == "all_others_cumulative" ~ "All Others (CNDDB + Other GBIF)",
                TRUE ~ category
            )
        )

    # Create the timeseries plot
    p_timeseries <- ggplot(timeseries_data, aes(x = year, y = cumulative_records, color = category)) +
        geom_line(size = 1.2, alpha = 0.8) +
        scale_color_manual(values = c("iNaturalist" = "#74c476", "All Others (CNDDB + Other GBIF)" = "#2b8cbe")) +
        scale_y_continuous(labels = comma_format()) +
        scale_x_continuous(breaks = seq(1990, 2025, 5)) +
        labs(
            title = "Cumulative Growth of Sensitive Species Observations Over Time",
            subtitle = "iNaturalist vs. All Others (CNDDB + Other GBIF Institutions)",
            x = "Year",
            y = "Cumulative Number of Observations",
            color = "Data Source"
        ) +
        theme_minimal() +
        theme(
            legend.position = "bottom",
            plot.title = element_text(hjust = 0.5, size = 14),
            plot.subtitle = element_text(hjust = 0.5, size = 12),
            axis.text.x = element_text(angle = 45, hjust = 1)
        )

    print(p_timeseries)
}
```