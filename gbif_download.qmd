---
title: "GBIF Data Download for Sensitive Species"
author: "Kyle Nessen"
date: "`r Sys.Date()`"
format:
  html:
    theme: cosmo
    toc: true
    code-fold: true
execute:
  warning: false
  message: false
---

# GBIF Data Download

This document handles the one-time download of GBIF data for sensitive species from CNDDB. Run this once to download the data, then use analysis.qmd for the actual analysis.

## Load Species List

```{r load-species}
library(readr)
library(dplyr)
library(rgbif)

# Load GBIF credentials from .Renviron
readRenviron(".Renviron")

# Verify credentials are loaded
if(Sys.getenv("GBIF_USER") == "" || Sys.getenv("GBIF_PWD") == "" || Sys.getenv("GBIF_EMAIL") == "") {
  stop("GBIF credentials not found. Check your .Renviron file.")
} else {
  cat("GBIF credentials loaded for user:", Sys.getenv("GBIF_USER"), "\n")
}

# Load the species list created by analysis.qmd
if(!file.exists("data/cnddb_species_list.csv")) {
  stop("Species list not found. Run analysis.qmd first to generate data/cnddb_species_list.csv")
}

cnddb_species_list <- read_csv("data/cnddb_species_list.csv")
species_for_gbif <- cnddb_species_list$SNAME

cat("Loaded", length(species_for_gbif), "species for GBIF queries\n")
cat("First 10 species:\n")
head(species_for_gbif, 10)
```

## Species Name Matching

```{r gbif-name-matching}
# Match species names to GBIF backbone taxonomy
# Using strict=TRUE to avoid fuzzy matches and verbose=TRUE to identify alternatives
cat("Matching species names to GBIF backbone taxonomy...\n")

gbif_matches <- name_backbone_checklist(
  name_data = species_for_gbif,
  strict = TRUE,
  verbose = TRUE
)

# Filter for high quality matches only
# Keep only exact matches and remove alternative suggestions
good_matches <- gbif_matches %>%
  filter(
    matchType == "EXACT",
    is_alternative == FALSE,
    status == "ACCEPTED",
    rank %in% c("SPECIES", "VARIETY", "SUBSPECIES")
  )

write_csv(good_matches, "data/gbif_good_matches.csv")

# Prepare taxon keys for download
taxon_keys <- good_matches$usageKey
cat("\nTaxon keys ready for download:", length(taxon_keys), "species\n")
```

## GBIF Bulk Download

```{r gbif-download}
# Only proceed if we have good matches
if(length(taxon_keys) > 0) {
  
  cat("Initiating GBIF download for", length(taxon_keys), "species...\n")
  cat("This may take 30+ minutes for large datasets.\n")
  
  # Create download request for California occurrences
  download_request <- occ_download(
    pred_in("taxonKey", taxon_keys),
    pred("country", "US"),
    pred("stateProvince", "California"),
    pred("hasCoordinate", TRUE),
    format = "SIMPLE_CSV"
  )
  
  cat("Download request submitted!\n")
  cat("Download key:", download_request, "\n")
  cat("Check status with: occ_download_meta('", download_request, "')\n")
  cat("Download when ready with: occ_download_get('", download_request, "')\n")
  
  # Save download info
  download_info <- data.frame(
    download_key = download_request,
    species_count = length(taxon_keys),
    request_date = Sys.time(),
    status = "RUNNING"
  )
  
  write_csv(download_info, "data/gbif_download_info.csv")
  
  cat("\nDownload info saved to data/gbif_download_info.csv\n")
  cat("When download is complete, extract the CSV and place in data/gbif_occurrences.csv\n")
  
} else {
  cat("No valid taxon keys found - cannot proceed with download\n")
}
```

## Next Steps

1. **Wait for download to complete** - Check status periodically with `occ_download_meta()`
2. **Download the file** when ready with `occ_download_get()`
3. **Extract the CSV** from the downloaded zip file
4. **Save as** `data/gbif_occurrences.csv`
5. **Run analysis.qmd** for the comparative analysis